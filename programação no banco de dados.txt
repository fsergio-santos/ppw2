

exemplo de trigger para gerar o id da entidade automáticamente

CREATE OR REPLACE TRIGGER trg_before_insert_usuario
BEFORE INSERT ON USUARIO
FOR EACH ROW
BEGIN
  IF :NEW.ID_USUARIO IS NULL THEN
    :NEW.ID_USUARIO := SEQUENCIA_USUARIO.NEXTVAL;
  END IF;
END;

exemplo de criação de sequência para gerar o id de uma tabela - entidade 

CREATE SEQUENCE FRANCISCO.SEQUENCIA_USUARIO INCREMENT BY 1 MINVALUE 1 MAXVALUE 99999999999 NOCYCLE CACHE 20 NOORDER 

exemplo de paginação - store procedure 

CREATE OR REPLACE PROCEDURE FRANCISCO.LISTAR_USUARIO ( 
	page IN NUMBER, 
	pageSize IN NUMBER,  
	dir IN VARCHAR2,  props IN VARCHAR2,  
	pageUser OUT SYS_REFCURSOR ) AS offset NUMBER;
BEGIN
	offset := ( page - 1 ) * pageSize;
	OPEN pageUser FOR 
      'SELECT * FROM (
       SELECT u.*, ROW_NUMBER() OVER (ORDER BY ' || props || ' ' || dir || ') AS rnum
       FROM USUARIO u
     )
     WHERE rnum > :offset AND rnum <= :pageSize'
	USING offset, pageSize * page;
END;


exemplo de paginação completa com store procedure

CREATE OR REPLACE PROCEDURE FRANCISCO.USER_PAGINATION(
    p_page IN NUMBER,
    p_page_size IN NUMBER,
    p_sort_column IN VARCHAR2,
    p_sort_direction IN VARCHAR2,
    p_search_key IN VARCHAR2,
    p_result OUT SYS_REFCURSOR,
    p_total_count OUT NUMBER
)
IS
    v_offset NUMBER;
    v_query VARCHAR2(4000);
    v_count_query VARCHAR2(4000);
    v_where_clause VARCHAR2(1000) := '1=1';
BEGIN
    -- Validar entrada
    IF p_sort_direction NOT IN ('ASC', 'DESC') THEN
        RAISE_APPLICATION_ERROR(-20001, 'Direção de ordenação inválida');
    END IF;

    v_offset := (p_page - 1) * p_page_size;
   
   v_where_clause := '1=1';

    IF p_search_key IS NOT NULL THEN
        v_where_clause := v_where_clause || ' AND (LOWER(cod_usuario) LIKE LOWER(''%' || p_search_key || '%'') 
                                                OR LOWER(nome_usuario) LIKE LOWER(''%' || p_search_key || '%'') 
                                                OR LOWER(email) LIKE LOWER(''%' || p_search_key || '%''))';
    END IF;

    -- Construir a query principal
    v_query := 'SELECT * FROM (
	           SELECT u.id_usuario, u.cod_usuario, u.nome_usuario, u.email, u.tipo, u.id_cidade, u.foto,  u.senha, u.ativo, c.nome_cidade AS nome_cidade,
                      ROW_NUMBER() OVER (ORDER BY u.' || p_sort_column || ' ' || p_sort_direction || ') AS rn
               FROM usuario u
               LEFT JOIN Cidade c ON u.id_cidade = c.id_cidade 
               WHERE ' || v_where_clause || '
            )
            WHERE rn > ' || v_offset || ' AND rn <= ' || (v_offset + p_page_size);
           
    -- Construir a query de contagem
    v_count_query := 'SELECT COUNT(*) FROM usuario WHERE ' || v_where_clause;

    -- Depuração
    DBMS_OUTPUT.PUT_LINE('Query Principal: ' || v_query);
    DBMS_OUTPUT.PUT_LINE('Query Contagem: ' || v_count_query);

    -- Executar a query de contagem
    EXECUTE IMMEDIATE v_count_query INTO p_total_count;

    -- Abrir o cursor para a query principal
    OPEN p_result FOR v_query;
END;



-- Tabela de Usuários
CREATE TABLE USUARIO (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(150) UNIQUE NOT NULL,
    SENHA VARCHAR2(255) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL
);

-- Tabela de Roles (Papéis)
CREATE TABLE ROLE (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOME_ROLE VARCHAR2(50) UNIQUE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL
);

-- Relacionamento Many-to-Many entre USUARIO e ROLE
CREATE TABLE USUARIO_ROLE (
    USUARIO_ID NUMBER NOT NULL,
    ROLE_ID NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY (USUARIO_ID, ROLE_ID),
    CONSTRAINT FK_USUARIO_ROLE_USUARIO FOREIGN KEY (USUARIO_ID) REFERENCES USUARIO(ID),
    CONSTRAINT FK_USUARIO_ROLE_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID)
);

-- Tabela de Resources (recursos, ex.: video, artigo, produto)
CREATE TABLE RESOURCE (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOME_RESOURCE VARCHAR2(100) UNIQUE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL
);

-- Tabela de Permissions (permissões: role + resource + action + possession)
CREATE TABLE PERMISSIONS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ROLE_ID NUMBER NOT NULL,
    RESOURCE_ID NUMBER NOT NULL,
    ACTION VARCHAR2(20) NOT NULL,       -- CREATE, READ, UPDATE, DELETE
    POSSESSION VARCHAR2(20) NOT NULL,   -- OWN ou ANY
    ATTRIBUTES VARCHAR2(4000),          -- atributos permitidos (separados por vírgula)
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT FK_PERMISSIONS_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID),
    CONSTRAINT FK_PERMISSIONS_RESOURCE FOREIGN KEY (RESOURCE_ID) REFERENCES RESOURCE(ID)
);


-- Trigger para USUARIO
CREATE OR REPLACE TRIGGER TRG_USUARIO_UPDATE
BEFORE UPDATE ON USUARIO
FOR EACH ROW
BEGIN
  :NEW.UPDATE_AT := CURRENT_TIMESTAMP;
END;
/

-- Trigger para ROLE
CREATE OR REPLACE TRIGGER TRG_ROLE_UPDATE
BEFORE UPDATE ON ROLE
FOR EACH ROW
BEGIN
  :NEW.UPDATE_AT := CURRENT_TIMESTAMP;
END;
/

-- Trigger para USUARIO_ROLE
CREATE OR REPLACE TRIGGER TRG_USUARIO_ROLE_UPDATE
BEFORE UPDATE ON USUARIO_ROLE
FOR EACH ROW
BEGIN
  :NEW.UPDATE_AT := CURRENT_TIMESTAMP;
END;
/

-- Trigger para RESOURCE
CREATE OR REPLACE TRIGGER TRG_RESOURCE_UPDATE
BEFORE UPDATE ON RESOURCE
FOR EACH ROW
BEGIN
  :NEW.UPDATE_AT := CURRENT_TIMESTAMP;
END;
/

-- Trigger para PERMISSIONS
CREATE OR REPLACE TRIGGER TRG_PERMISSIONS_UPDATE
BEFORE UPDATE ON PERMISSIONS
FOR EACH ROW
BEGIN
  :NEW.UPDATE_AT := CURRENT_TIMESTAMP;
END;
/


drives do oracle 
//https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html